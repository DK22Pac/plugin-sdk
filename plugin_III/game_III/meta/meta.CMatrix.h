/*
    Plugin-SDK (Grand Theft Auto 3) header file
    Authors: GTA Community. See more here
    https://github.com/DK22Pac/plugin-sdk
    Do not delete this comment block. Respect others' work!
*/
#include "PluginBase.h"

namespace plugin {

CTOR_META_BEGIN(CMatrix)
static int address;
static int global_address;
static const int id = 0x4732B0;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4732B0, 0x4732B0, 0x4732B0>;
// total references count: 10en (2), 11en (2), steam (2)
using refs_t = RefList<0x4730FA,100,0,0x472F40,1, 0x473109,100,0,0x472F40,2, 0x4730DA,110,0,0x472F20,1, 0x4730E9,110,0,0x472F20,2, 0x4730DA,120,0,0x472F20,1, 0x4730E9,120,0,0x472F20,2>;
using def_t = CMatrix *(CMatrix *);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *>, 0>;
META_END

CTOR_META_BEGIN_OVERLOADED(CMatrix, void(CMatrix const &))
static int address;
static int global_address;
static const int id = 0x4B8D70;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4B8D70, 0x4B8E60, 0x4B8DF0>;
// total references count: 10en (30), 11en (30), steam (30)
using refs_t = RefList<0x42C5A1,100,0,0x42C1E0,1, 0x43D3C6,100,0,0x43D3B0,1, 0x474CE9,100,0,0x474CC0,1, 0x49627E,100,0,0x4961A0,1, 0x496F58,100,0,0x496F10,1, 0x4B9C15,100,0,0x4B9BF0,1, 0x4B9EB9,100,0,0x4B9D60,1, 0x4CCF7C,100,0,0x4CCEB0,1, 0x4D22BC,100,0,0x4D1ED0,1, 0x4D4AE9,100,0,0x4D4970,1, 0x4E0096,100,0,0x4DF940,1, 0x4E2497,100,0,0x4E2480,1, 0x4E2937,100,0,0x4E2920,1, 0x4E2D8F,100,0,0x4E2D70,1, 0x4E2E89,100,0,0x4E2E50,1, 0x4E373C,100,0,0x4E36E0,1, 0x4E416D,100,0,0x4E3EC0,1, 0x4E467C,100,0,0x4E4660,1, 0x4E4CD9,100,0,0x4E4C70,1, 0x4E54A5,100,0,0x4E52A0,1, 0x4E5775,100,0,0x4E5570,1, 0x4F50C8,100,0,0x4F4A00,1, 0x50FADA,100,0,0x50FAA0,1, 0x532A51,100,0,0x531470,1, 0x545D3A,100,0,0x545BD0,1, 0x555CF9,100,0,0x5554E0,1, 0x555F54,100,0,0x5554E0,2, 0x55644D,100,0,0x5554E0,3, 0x5565C5,100,0,0x5554E0,4, 0x5566FD,100,0,0x5554E0,5, 0x42C5A1,110,0,0x42C1E0,1, 0x43D3C6,110,0,0x43D3B0,1, 0x474CE9,110,0,0x474CC0,1, 0x49633E,110,0,0x496260,1, 0x497018,110,0,0x496FD0,1, 0x4B9D05,110,0,0x4B9CE0,1, 0x4B9FA9,110,0,0x4B9E50,1, 0x4CD01C,110,0,0x4CCF50,1, 0x4D235C,110,0,0x4D1F70,1, 0x4D4B89,110,0,0x4D4A10,1, 0x4E0146,110,0,0x4DF9F0,1, 0x4E2547,110,0,0x4E2530,1, 0x4E29E7,110,0,0x4E29D0,1, 0x4E2E3F,110,0,0x4E2E20,1, 0x4E2F39,110,0,0x4E2F00,1, 0x4E37EC,110,0,0x4E3790,1, 0x4E421D,110,0,0x4E3F70,1, 0x4E472C,110,0,0x4E4710,1, 0x4E4D89,110,0,0x4E4D20,1, 0x4E5555,110,0,0x4E5350,1, 0x4E5825,110,0,0x4E5620,1, 0x4F5178,110,0,0x4F4AB0,1, 0x50FCCA,110,0,0x50FC90,1, 0x532C91,110,0,0x5316B0,1, 0x545F3A,110,0,0x545DD0,1, 0x555E29,110,0,0x555610,1, 0x556084,110,0,0x555610,2, 0x55657D,110,0,0x555610,3, 0x5566F5,110,0,0x555610,4, 0x55682D,110,0,0x555610,5, 0x42C5A1,120,0,0x42C1E0,1, 0x43D3C6,120,0,0x43D3B0,1, 0x474CE9,120,0,0x474CC0,1, 0x4962CE,120,0,0x4961F0,1, 0x496FA8,120,0,0x496F60,1, 0x4B9C95,120,0,0x4B9C70,1, 0x4B9F39,120,0,0x4B9DE0,1, 0x4CCFAC,120,0,0x4CCEE0,1, 0x4D22EC,120,0,0x4D1F00,1, 0x4D4B19,120,0,0x4D49A0,1, 0x4E00D6,120,0,0x4DF980,1, 0x4E24D7,120,0,0x4E24C0,1, 0x4E2977,120,0,0x4E2960,1, 0x4E2DCF,120,0,0x4E2DB0,1, 0x4E2EC9,120,0,0x4E2E90,1, 0x4E377C,120,0,0x4E3720,1, 0x4E41AD,120,0,0x4E3F00,1, 0x4E46BC,120,0,0x4E46A0,1, 0x4E4D19,120,0,0x4E4CB0,1, 0x4E54E5,120,0,0x4E52E0,1, 0x4E57B5,120,0,0x4E55B0,1, 0x4F5108,120,0,0x4F4A40,1, 0x50FC5A,120,0,0x50FC20,1, 0x532C21,120,0,0x531640,1, 0x545EEA,120,0,0x545D80,1, 0x555DD9,120,0,0x5555C0,1, 0x556034,120,0,0x5555C0,2, 0x55652D,120,0,0x5555C0,3, 0x5566A5,120,0,0x5555C0,4, 0x5567DD,120,0,0x5555C0,5>;
using def_t = CMatrix *(CMatrix *, CMatrix const &);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *,CMatrix const &>, 0,1>;
META_END

CTOR_META_BEGIN_OVERLOADED(CMatrix, void(RwMatrix *, bool))
static int address;
static int global_address;
static const int id = 0x4B8D90;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4B8D90, 0x4B8E80, 0x4B8E10>;
// total references count: 10en (17), 11en (17), steam (17)
using refs_t = RefList<0x47569A,100,0,0x475670,1, 0x4778DB,100,0,0x4777C0,1, 0x4787E2,100,0,0x4786B0,1, 0x47891D,100,0,0x4786B0,2, 0x4BA790,100,0,0x4BA760,1, 0x4BA82B,100,0,0x4BA800,1, 0x4ED77D,100,0,0x4ED620,1, 0x4ED86F,100,0,0x4ED810,1, 0x518C5D,100,0,0x518BF0,1, 0x52D025,100,0,0x52C6B0,1, 0x52E69A,100,0,0x52E680,1, 0x52E76E,100,0,0x52E750,1, 0x535285,100,0,0x535250,1, 0x53C2D9,100,0,0x53C240,1, 0x55038F,100,0,0x550360,1, 0x5503A4,100,0,0x550360,2, 0x596CB0,100,0,0x5966E0,1, 0x47569A,110,0,0x475670,1, 0x4778DB,110,0,0x4777C0,1, 0x4787E2,110,0,0x4786B0,1, 0x47891D,110,0,0x4786B0,2, 0x4BA880,110,0,0x4BA850,1, 0x4BA91B,110,0,0x4BA8F0,1, 0x4ED82D,110,0,0x4ED6D0,1, 0x4ED91F,110,0,0x4ED8C0,1, 0x518E8D,110,0,0x518E20,1, 0x52D265,110,0,0x52C8F0,1, 0x52E8DA,110,0,0x52E8C0,1, 0x52E9AE,110,0,0x52E990,1, 0x5354C5,110,0,0x535490,1, 0x53C519,110,0,0x53C480,1, 0x5504CF,110,0,0x5504A0,1, 0x5504E4,110,0,0x5504A0,2, 0x596F60,110,0,0x596990,1, 0x47569A,120,0,0x475670,1, 0x4778DB,120,0,0x4777C0,1, 0x4787E2,120,0,0x4786B0,1, 0x47891D,120,0,0x4786B0,2, 0x4BA810,120,0,0x4BA7E0,1, 0x4BA8AB,120,0,0x4BA880,1, 0x4ED7BD,120,0,0x4ED660,1, 0x4ED8AF,120,0,0x4ED850,1, 0x518E1D,120,0,0x518DB0,1, 0x52D1F5,120,0,0x52C880,1, 0x52E86A,120,0,0x52E850,1, 0x52E93E,120,0,0x52E920,1, 0x535455,120,0,0x535420,1, 0x53C4C9,120,0,0x53C430,1, 0x55047F,120,0,0x550450,1, 0x550494,120,0,0x550450,2, 0x596E50,120,0,0x596880,1>;
using def_t = CMatrix *(CMatrix *, RwMatrix *, bool);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *,RwMatrix *,bool>, 0,1,2>;
META_END

DTOR_META_BEGIN(CMatrix)
static int address;
static int global_address;
static const int id = 0x4B8DB0;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4B8DB0, 0x4B8EA0, 0x4B8E30>;
// total references count: 10en (220), 11en (220), steam (220)
using refs_t = RefList<0x410D0F,100,0,0x410BE0,1, 0x410DB4,100,0,0x410BE0,2, 0x4295FE,100,0,0x429560,1, 0x42C5C6,100,0,0x42C1E0,1, 0x434F79,100,0,0x434B20,1, 0x43740E,100,0,0x436FA0,1, 0x437660,100,0,0x436FA0,2, 0x437669,100,0,0x436FA0,3, 0x437AB6,100,0,0x4376A0,1, 0x43D4D9,100,0,0x43D3B0,1, 0x4482D1,100,0,0x448240,1, 0x4483BF,100,0,0x448240,2, 0x44847C,100,0,0x448240,3, 0x4484D4,100,0,0x448240,4, 0x44856B,100,0,0x448240,5, 0x448600,100,0,0x448240,6, 0x448695,100,0,0x448240,7, 0x4487C9,100,0,0x448240,8, 0x44893D,100,0,0x448240,9, 0x44898A,100,0,0x448240,10, 0x4489FE,100,0,0x448240,11, 0x448B16,100,0,0x448240,12, 0x448B71,100,0,0x448240,13, 0x448BCC,100,0,0x448240,14, 0x448C23,100,0,0x448240,15, 0x448C7E,100,0,0x448240,16, 0x448CD5,100,0,0x448240,17, 0x448D46,100,0,0x448240,18, 0x448D85,100,0,0x448240,19, 0x448DF6,100,0,0x448240,20, 0x448E3E,100,0,0x448240,21, 0x448EA1,100,0,0x448240,22, 0x448F00,100,0,0x448240,23, 0x448F60,100,0,0x448240,24, 0x4490F2,100,0,0x448240,25, 0x449112,100,0,0x448240,26, 0x449144,100,0,0x448240,27, 0x449176,100,0,0x448240,28, 0x4491E8,100,0,0x448240,29, 0x44934D,100,0,0x448240,30, 0x4493A0,100,0,0x448240,31, 0x449469,100,0,0x448240,32, 0x4494CC,100,0,0x448240,33, 0x44952F,100,0,0x448240,34, 0x449577,100,0,0x448240,35, 0x4495BF,100,0,0x448240,36, 0x449622,100,0,0x448240,37, 0x4496EB,100,0,0x448240,38, 0x44974E,100,0,0x448240,39, 0x4497B1,100,0,0x448240,40, 0x4497F8,100,0,0x448240,41, 0x449829,100,0,0x448240,42, 0x44985A,100,0,0x448240,43, 0x44987F,100,0,0x448240,44, 0x44A06A,100,0,0x448240,45, 0x44A8F3,100,0,0x448240,46, 0x44AA45,100,0,0x448240,47, 0x44AAB6,100,0,0x448240,48, 0x44AAE8,100,0,0x448240,49, 0x44ABA6,100,0,0x448240,50, 0x44ABFF,100,0,0x448240,51, 0x44AC48,100,0,0x448240,52, 0x44AC68,100,0,0x448240,53, 0x44AD53,100,0,0x448240,54, 0x44ADF5,100,0,0x448240,55, 0x44AE15,100,0,0x448240,56, 0x44AE47,100,0,0x448240,57, 0x44AED7,100,0,0x448240,58, 0x44AFE3,100,0,0x448240,59, 0x44B07B,100,0,0x448240,60, 0x44B0D7,100,0,0x448240,61, 0x44B17C,100,0,0x448240,62, 0x44B21C,100,0,0x448240,63, 0x44B261,100,0,0x448240,64, 0x44B2A6,100,0,0x448240,65, 0x44B549,100,0,0x448240,66, 0x44B83E,100,0,0x448240,67, 0x44B8AA,100,0,0x448240,68, 0x44B901,100,0,0x448240,69, 0x44B96D,100,0,0x448240,70, 0x44BA0D,100,0,0x448240,71, 0x44BB03,100,0,0x448240,72, 0x44BB68,100,0,0x448240,73, 0x44BBCE,100,0,0x448240,74, 0x44BC49,100,0,0x448240,75, 0x44BCC8,100,0,0x448240,76, 0x44BD4C,100,0,0x448240,77, 0x44BDD4,100,0,0x448240,78, 0x44BE61,100,0,0x448240,79, 0x44BED2,100,0,0x448240,80, 0x44BEF7,100,0,0x448240,81, 0x44BF3D,100,0,0x448240,82, 0x44BFC5,100,0,0x448240,83, 0x44C293,100,0,0x448240,84, 0x44C2EA,100,0,0x448240,85, 0x44C3A6,100,0,0x448240,86, 0x44C462,100,0,0x448240,87, 0x44C558,100,0,0x448240,88, 0x44C64E,100,0,0x448240,89, 0x44C77E,100,0,0x448240,90, 0x44C8AE,100,0,0x448240,91, 0x44C993,100,0,0x448240,92, 0x44C9B3,100,0,0x448240,93, 0x44CA2E,100,0,0x448240,94, 0x44CA90,100,0,0x448240,95, 0x44CAE6,100,0,0x448240,96, 0x44CB07,100,0,0x448240,97, 0x46EECA,100,0,0x46EEA0,1, 0x4731ED,100,0,0x4731C0,1, 0x4731F8,100,0,0x4731C0,2, 0x47325F,100,0,0x473250,1, 0x47326A,100,0,0x473250,2, 0x474D0C,100,0,0x474CC0,1, 0x47581D,100,0,0x475670,1, 0x4778F1,100,0,0x4777C0,1, 0x4787F8,100,0,0x4786B0,1, 0x478939,100,0,0x4786B0,2, 0x496B5C,100,0,0x4961A0,1, 0x496D4D,100,0,0x4961A0,2, 0x496DF3,100,0,0x4961A0,3, 0x497020,100,0,0x496F10,1, 0x4970A9,100,0,0x496F10,2, 0x49BA16,100,0,0x49B620,1, 0x49BBB6,100,0,0x49B620,2, 0x49DDEA,100,0,0x49DA10,1, 0x49DF83,100,0,0x49DA10,2, 0x49F9EC,100,0,0x49F9E0,1, 0x4B4D1A,100,0,0x4B4AC0,1, 0x4B4D3C,100,0,0x4B4AC0,2, 0x4B9C1D,100,0,0x4B9BF0,1, 0x4B9EC1,100,0,0x4B9D60,1, 0x4BA7BB,100,0,0x4BA760,1, 0x4BA7C3,100,0,0x4BA760,2, 0x4BA856,100,0,0x4BA800,1, 0x4BA85E,100,0,0x4BA800,2, 0x4BAE5B,100,0,0x4BAE00,1, 0x4CCFD3,100,0,0x4CCEB0,1, 0x4CD04F,100,0,0x4CCEB0,2, 0x4CDE1C,100,0,0x4CCEB0,3, 0x4CE219,100,0,0x4CCEB0,4, 0x4CE361,100,0,0x4CCEB0,5, 0x4CE60D,100,0,0x4CCEB0,6, 0x4D23EC,100,0,0x4D1ED0,1, 0x4D4CE8,100,0,0x4D4970,1, 0x4D4D7C,100,0,0x4D4970,2, 0x4D4DCD,100,0,0x4D4970,3, 0x4D4DD6,100,0,0x4D4970,4, 0x4E013F,100,0,0x4DF940,1, 0x4E28E7,100,0,0x4E2480,1, 0x4E2A85,100,0,0x4E2920,1, 0x4E2D34,100,0,0x4E2920,2, 0x4E2E3C,100,0,0x4E2D70,1, 0x4E3266,100,0,0x4E2E50,1, 0x4E3859,100,0,0x4E36E0,1, 0x4E43E5,100,0,0x4E3EC0,1, 0x4E471B,100,0,0x4E4660,1, 0x4E4D77,100,0,0x4E4C70,1, 0x4E54CA,100,0,0x4E52A0,1, 0x4E579A,100,0,0x4E5570,1, 0x4ED7F6,100,0,0x4ED620,1, 0x4ED90D,100,0,0x4ED810,1, 0x4F50F3,100,0,0x4F4A00,1, 0x5048D3,100,0,0x5048D0,1, 0x50FAE3,100,0,0x50FAA0,1, 0x50FB78,100,0,0x50FAA0,2, 0x518C75,100,0,0x518BF0,1, 0x51B29D,100,0,0x51B1B0,1, 0x51C313,100,0,0x51C310,1, 0x52D096,100,0,0x52C6B0,1, 0x52D09F,100,0,0x52C6B0,2, 0x52E734,100,0,0x52E680,1, 0x52E8FD,100,0,0x52E750,1, 0x532AFB,100,0,0x531470,1, 0x53530B,100,0,0x535250,1, 0x535FFB,100,0,0x535B40,1, 0x539F87,100,0,0x539EA0,1, 0x53B254,100,0,0x539EA0,2, 0x53C0CF,100,0,0x53BF70,1, 0x53C2FD,100,0,0x53C240,1, 0x53DFB0,100,0,0x53D530,1, 0x53EC60,100,0,0x53E890,1, 0x542DC3,100,0,0x542C40,1, 0x542DCC,100,0,0x542C40,2, 0x542DD5,100,0,0x542C40,3, 0x545EDD,100,0,0x545BD0,1, 0x546A96,100,0,0x546A90,1, 0x547CAE,100,0,0x547B70,1, 0x55047B,100,0,0x550360,1, 0x550483,100,0,0x550360,2, 0x555D27,100,0,0x5554E0,1, 0x555F82,100,0,0x5554E0,2, 0x55647B,100,0,0x5554E0,3, 0x5565F3,100,0,0x5554E0,4, 0x55672B,100,0,0x5554E0,5, 0x55B54C,100,0,0x55B030,1, 0x55B5EF,100,0,0x55B030,2, 0x55B6D1,100,0,0x55B030,3, 0x57AD10,100,0,0x57AC60,1, 0x594120,100,0,0x594050,1, 0x594129,100,0,0x594050,2, 0x5941A6,100,0,0x594050,3, 0x5941B2,100,0,0x594050,4, 0x59427D,100,0,0x594050,5, 0x594DAF,100,0,0x594D10,1, 0x594DB8,100,0,0x594D10,2, 0x594E35,100,0,0x594D10,3, 0x594E41,100,0,0x594D10,4, 0x59520B,100,0,0x594D10,5, 0x595712,100,0,0x595240,1, 0x59571B,100,0,0x595240,2, 0x5957A4,100,0,0x595240,3, 0x5957AD,100,0,0x595240,4, 0x596D1E,100,0,0x5966E0,1, 0x596D27,100,0,0x5966E0,2, 0x40F73E,100,2,0,1, 0x40F932,100,2,0,1, 0x410C61,100,2,0,1, 0x410C99,100,2,0,1, 0x518C0F,100,2,0,1, 0x53CBD8,100,2,0,1, 0x410D0F,110,0,0x410BE0,1, 0x410DB4,110,0,0x410BE0,2, 0x4295FE,110,0,0x429560,1, 0x42C5C6,110,0,0x42C1E0,1, 0x434F79,110,0,0x434B20,1, 0x43740E,110,0,0x436FA0,1, 0x437660,110,0,0x436FA0,2, 0x437669,110,0,0x436FA0,3, 0x437AB6,110,0,0x4376A0,1, 0x43D4D9,110,0,0x43D3B0,1, 0x4482D1,110,0,0x448240,1, 0x4483BF,110,0,0x448240,2, 0x44847C,110,0,0x448240,3, 0x4484D4,110,0,0x448240,4, 0x44856B,110,0,0x448240,5, 0x448600,110,0,0x448240,6, 0x448695,110,0,0x448240,7, 0x4487C9,110,0,0x448240,8, 0x44893D,110,0,0x448240,9, 0x44898A,110,0,0x448240,10, 0x4489FE,110,0,0x448240,11, 0x448B16,110,0,0x448240,12, 0x448B71,110,0,0x448240,13, 0x448BCC,110,0,0x448240,14, 0x448C23,110,0,0x448240,15, 0x448C7E,110,0,0x448240,16, 0x448CD5,110,0,0x448240,17, 0x448D46,110,0,0x448240,18, 0x448D85,110,0,0x448240,19, 0x448DF6,110,0,0x448240,20, 0x448E3E,110,0,0x448240,21, 0x448EA1,110,0,0x448240,22, 0x448F00,110,0,0x448240,23, 0x448F60,110,0,0x448240,24, 0x4490F2,110,0,0x448240,25, 0x449112,110,0,0x448240,26, 0x449144,110,0,0x448240,27, 0x449176,110,0,0x448240,28, 0x4491E8,110,0,0x448240,29, 0x44934D,110,0,0x448240,30, 0x4493A0,110,0,0x448240,31, 0x449469,110,0,0x448240,32, 0x4494CC,110,0,0x448240,33, 0x44952F,110,0,0x448240,34, 0x449577,110,0,0x448240,35, 0x4495BF,110,0,0x448240,36, 0x449622,110,0,0x448240,37, 0x4496EB,110,0,0x448240,38, 0x44974E,110,0,0x448240,39, 0x4497B1,110,0,0x448240,40, 0x4497F8,110,0,0x448240,41, 0x449829,110,0,0x448240,42, 0x44985A,110,0,0x448240,43, 0x44987F,110,0,0x448240,44, 0x44A06A,110,0,0x448240,45, 0x44A8F3,110,0,0x448240,46, 0x44AA45,110,0,0x448240,47, 0x44AAB6,110,0,0x448240,48, 0x44AAE8,110,0,0x448240,49, 0x44ABA6,110,0,0x448240,50, 0x44ABFF,110,0,0x448240,51, 0x44AC48,110,0,0x448240,52, 0x44AC68,110,0,0x448240,53, 0x44AD53,110,0,0x448240,54, 0x44ADF5,110,0,0x448240,55, 0x44AE15,110,0,0x448240,56, 0x44AE47,110,0,0x448240,57, 0x44AED7,110,0,0x448240,58, 0x44AFE3,110,0,0x448240,59, 0x44B07B,110,0,0x448240,60, 0x44B0D7,110,0,0x448240,61, 0x44B17C,110,0,0x448240,62, 0x44B21C,110,0,0x448240,63, 0x44B261,110,0,0x448240,64, 0x44B2A6,110,0,0x448240,65, 0x44B549,110,0,0x448240,66, 0x44B83E,110,0,0x448240,67, 0x44B8AA,110,0,0x448240,68, 0x44B901,110,0,0x448240,69, 0x44B96D,110,0,0x448240,70, 0x44BA0D,110,0,0x448240,71, 0x44BB03,110,0,0x448240,72, 0x44BB68,110,0,0x448240,73, 0x44BBCE,110,0,0x448240,74, 0x44BC49,110,0,0x448240,75, 0x44BCC8,110,0,0x448240,76, 0x44BD4C,110,0,0x448240,77, 0x44BDD4,110,0,0x448240,78, 0x44BE61,110,0,0x448240,79, 0x44BED2,110,0,0x448240,80, 0x44BEF7,110,0,0x448240,81, 0x44BF3D,110,0,0x448240,82, 0x44BFC5,110,0,0x448240,83, 0x44C293,110,0,0x448240,84, 0x44C2EA,110,0,0x448240,85, 0x44C3A6,110,0,0x448240,86, 0x44C462,110,0,0x448240,87, 0x44C558,110,0,0x448240,88, 0x44C64E,110,0,0x448240,89, 0x44C77E,110,0,0x448240,90, 0x44C8AE,110,0,0x448240,91, 0x44C993,110,0,0x448240,92, 0x44C9B3,110,0,0x448240,93, 0x44CA2E,110,0,0x448240,94, 0x44CA90,110,0,0x448240,95, 0x44CAE6,110,0,0x448240,96, 0x44CB07,110,0,0x448240,97, 0x46EEAA,110,0,0x46EE80,1, 0x4731ED,110,0,0x4731C0,1, 0x4731F8,110,0,0x4731C0,2, 0x47325F,110,0,0x473250,1, 0x47326A,110,0,0x473250,2, 0x474D0C,110,0,0x474CC0,1, 0x47581D,110,0,0x475670,1, 0x4778F1,110,0,0x4777C0,1, 0x4787F8,110,0,0x4786B0,1, 0x478939,110,0,0x4786B0,2, 0x496C1C,110,0,0x496260,1, 0x496E0D,110,0,0x496260,2, 0x496EB3,110,0,0x496260,3, 0x4970E0,110,0,0x496FD0,1, 0x497169,110,0,0x496FD0,2, 0x49BB06,110,0,0x49B710,1, 0x49BCA6,110,0,0x49B710,2, 0x49DEDA,110,0,0x49DB00,1, 0x49E073,110,0,0x49DB00,2, 0x49FADC,110,0,0x49FAD0,1, 0x4B4E0A,110,0,0x4B4BB0,1, 0x4B4E2C,110,0,0x4B4BB0,2, 0x4B9D0D,110,0,0x4B9CE0,1, 0x4B9FB1,110,0,0x4B9E50,1, 0x4BA8AB,110,0,0x4BA850,1, 0x4BA8B3,110,0,0x4BA850,2, 0x4BA946,110,0,0x4BA8F0,1, 0x4BA94E,110,0,0x4BA8F0,2, 0x4BAF4B,110,0,0x4BAEF0,1, 0x4CD073,110,0,0x4CCF50,1, 0x4CD0EF,110,0,0x4CCF50,2, 0x4CDEBC,110,0,0x4CCF50,3, 0x4CE2B9,110,0,0x4CCF50,4, 0x4CE401,110,0,0x4CCF50,5, 0x4CE6AD,110,0,0x4CCF50,6, 0x4D248C,110,0,0x4D1F70,1, 0x4D4D88,110,0,0x4D4A10,1, 0x4D4E1C,110,0,0x4D4A10,2, 0x4D4E6D,110,0,0x4D4A10,3, 0x4D4E76,110,0,0x4D4A10,4, 0x4E01EF,110,0,0x4DF9F0,1, 0x4E2997,110,0,0x4E2530,1, 0x4E2B35,110,0,0x4E29D0,1, 0x4E2DE4,110,0,0x4E29D0,2, 0x4E2EEC,110,0,0x4E2E20,1, 0x4E3316,110,0,0x4E2F00,1, 0x4E3909,110,0,0x4E3790,1, 0x4E4495,110,0,0x4E3F70,1, 0x4E47CB,110,0,0x4E4710,1, 0x4E4E27,110,0,0x4E4D20,1, 0x4E557A,110,0,0x4E5350,1, 0x4E584A,110,0,0x4E5620,1, 0x4ED8A6,110,0,0x4ED6D0,1, 0x4ED9BD,110,0,0x4ED8C0,1, 0x4F51A3,110,0,0x4F4AB0,1, 0x5049B3,110,0,0x5049B0,1, 0x50FCD3,110,0,0x50FC90,1, 0x50FD68,110,0,0x50FC90,2, 0x518EA5,110,0,0x518E20,1, 0x51B4CD,110,0,0x51B3E0,1, 0x51C543,110,0,0x51C540,1, 0x52D2D6,110,0,0x52C8F0,1, 0x52D2DF,110,0,0x52C8F0,2, 0x52E974,110,0,0x52E8C0,1, 0x52EB3D,110,0,0x52E990,1, 0x532D3B,110,0,0x5316B0,1, 0x53554B,110,0,0x535490,1, 0x53623B,110,0,0x535D80,1, 0x53A1C7,110,0,0x53A0E0,1, 0x53B494,110,0,0x53A0E0,2, 0x53C30F,110,0,0x53C1B0,1, 0x53C53D,110,0,0x53C480,1, 0x53E1F0,110,0,0x53D770,1, 0x53EEA0,110,0,0x53EAD0,1, 0x543003,110,0,0x542E80,1, 0x54300C,110,0,0x542E80,2, 0x543015,110,0,0x542E80,3, 0x5460DD,110,0,0x545DD0,1, 0x546C96,110,0,0x546C90,1, 0x547EAE,110,0,0x547D70,1, 0x5505BB,110,0,0x5504A0,1, 0x5505C3,110,0,0x5504A0,2, 0x555E57,110,0,0x555610,1, 0x5560B2,110,0,0x555610,2, 0x5565AB,110,0,0x555610,3, 0x556723,110,0,0x555610,4, 0x55685B,110,0,0x555610,5, 0x55B67C,110,0,0x55B160,1, 0x55B71F,110,0,0x55B160,2, 0x55B801,110,0,0x55B160,3, 0x57B060,110,0,0x57AFB0,1, 0x5943D0,110,0,0x594300,1, 0x5943D9,110,0,0x594300,2, 0x594456,110,0,0x594300,3, 0x594462,110,0,0x594300,4, 0x59452D,110,0,0x594300,5, 0x59505F,110,0,0x594FC0,1, 0x595068,110,0,0x594FC0,2, 0x5950E5,110,0,0x594FC0,3, 0x5950F1,110,0,0x594FC0,4, 0x5954BB,110,0,0x594FC0,5, 0x5959C2,110,0,0x5954F0,1, 0x5959CB,110,0,0x5954F0,2, 0x595A54,110,0,0x5954F0,3, 0x595A5D,110,0,0x5954F0,4, 0x596FCE,110,0,0x596990,1, 0x596FD7,110,0,0x596990,2, 0x40F73E,110,2,0,1, 0x40F932,110,2,0,1, 0x410C61,110,2,0,1, 0x410C99,110,2,0,1, 0x518E3F,110,2,0,1, 0x53CE18,110,2,0,1, 0x410D0F,120,0,0x410BE0,1, 0x410DB4,120,0,0x410BE0,2, 0x4295FE,120,0,0x429560,1, 0x42C5C6,120,0,0x42C1E0,1, 0x434F79,120,0,0x434B20,1, 0x43740E,120,0,0x436FA0,1, 0x437660,120,0,0x436FA0,2, 0x437669,120,0,0x436FA0,3, 0x437AB6,120,0,0x4376A0,1, 0x43D4D9,120,0,0x43D3B0,1, 0x4482D1,120,0,0x448240,1, 0x4483BF,120,0,0x448240,2, 0x44847C,120,0,0x448240,3, 0x4484D4,120,0,0x448240,4, 0x44856B,120,0,0x448240,5, 0x448600,120,0,0x448240,6, 0x448695,120,0,0x448240,7, 0x4487C9,120,0,0x448240,8, 0x44893D,120,0,0x448240,9, 0x44898A,120,0,0x448240,10, 0x4489FE,120,0,0x448240,11, 0x448B16,120,0,0x448240,12, 0x448B71,120,0,0x448240,13, 0x448BCC,120,0,0x448240,14, 0x448C23,120,0,0x448240,15, 0x448C7E,120,0,0x448240,16, 0x448CD5,120,0,0x448240,17, 0x448D46,120,0,0x448240,18, 0x448D85,120,0,0x448240,19, 0x448DF6,120,0,0x448240,20, 0x448E3E,120,0,0x448240,21, 0x448EA1,120,0,0x448240,22, 0x448F00,120,0,0x448240,23, 0x448F60,120,0,0x448240,24, 0x4490F2,120,0,0x448240,25, 0x449112,120,0,0x448240,26, 0x449144,120,0,0x448240,27, 0x449176,120,0,0x448240,28, 0x4491E8,120,0,0x448240,29, 0x44934D,120,0,0x448240,30, 0x4493A0,120,0,0x448240,31, 0x449469,120,0,0x448240,32, 0x4494CC,120,0,0x448240,33, 0x44952F,120,0,0x448240,34, 0x449577,120,0,0x448240,35, 0x4495BF,120,0,0x448240,36, 0x449622,120,0,0x448240,37, 0x4496EB,120,0,0x448240,38, 0x44974E,120,0,0x448240,39, 0x4497B1,120,0,0x448240,40, 0x4497F8,120,0,0x448240,41, 0x449829,120,0,0x448240,42, 0x44985A,120,0,0x448240,43, 0x44987F,120,0,0x448240,44, 0x44A06A,120,0,0x448240,45, 0x44A8F3,120,0,0x448240,46, 0x44AA45,120,0,0x448240,47, 0x44AAB6,120,0,0x448240,48, 0x44AAE8,120,0,0x448240,49, 0x44ABA6,120,0,0x448240,50, 0x44ABFF,120,0,0x448240,51, 0x44AC48,120,0,0x448240,52, 0x44AC68,120,0,0x448240,53, 0x44AD53,120,0,0x448240,54, 0x44ADF5,120,0,0x448240,55, 0x44AE15,120,0,0x448240,56, 0x44AE47,120,0,0x448240,57, 0x44AED7,120,0,0x448240,58, 0x44AFE3,120,0,0x448240,59, 0x44B07B,120,0,0x448240,60, 0x44B0D7,120,0,0x448240,61, 0x44B17C,120,0,0x448240,62, 0x44B21C,120,0,0x448240,63, 0x44B261,120,0,0x448240,64, 0x44B2A6,120,0,0x448240,65, 0x44B549,120,0,0x448240,66, 0x44B83E,120,0,0x448240,67, 0x44B8AA,120,0,0x448240,68, 0x44B901,120,0,0x448240,69, 0x44B96D,120,0,0x448240,70, 0x44BA0D,120,0,0x448240,71, 0x44BB03,120,0,0x448240,72, 0x44BB68,120,0,0x448240,73, 0x44BBCE,120,0,0x448240,74, 0x44BC49,120,0,0x448240,75, 0x44BCC8,120,0,0x448240,76, 0x44BD4C,120,0,0x448240,77, 0x44BDD4,120,0,0x448240,78, 0x44BE61,120,0,0x448240,79, 0x44BED2,120,0,0x448240,80, 0x44BEF7,120,0,0x448240,81, 0x44BF3D,120,0,0x448240,82, 0x44BFC5,120,0,0x448240,83, 0x44C293,120,0,0x448240,84, 0x44C2EA,120,0,0x448240,85, 0x44C3A6,120,0,0x448240,86, 0x44C462,120,0,0x448240,87, 0x44C558,120,0,0x448240,88, 0x44C64E,120,0,0x448240,89, 0x44C77E,120,0,0x448240,90, 0x44C8AE,120,0,0x448240,91, 0x44C993,120,0,0x448240,92, 0x44C9B3,120,0,0x448240,93, 0x44CA2E,120,0,0x448240,94, 0x44CA90,120,0,0x448240,95, 0x44CAE6,120,0,0x448240,96, 0x44CB07,120,0,0x448240,97, 0x46EEAA,120,0,0x46EE80,1, 0x4731ED,120,0,0x4731C0,1, 0x4731F8,120,0,0x4731C0,2, 0x47325F,120,0,0x473250,1, 0x47326A,120,0,0x473250,2, 0x474D0C,120,0,0x474CC0,1, 0x47581D,120,0,0x475670,1, 0x4778F1,120,0,0x4777C0,1, 0x4787F8,120,0,0x4786B0,1, 0x478939,120,0,0x4786B0,2, 0x496BAC,120,0,0x4961F0,1, 0x496D9D,120,0,0x4961F0,2, 0x496E43,120,0,0x4961F0,3, 0x497070,120,0,0x496F60,1, 0x4970F9,120,0,0x496F60,2, 0x49BA96,120,0,0x49B6A0,1, 0x49BC36,120,0,0x49B6A0,2, 0x49DE6A,120,0,0x49DA90,1, 0x49E003,120,0,0x49DA90,2, 0x49FA6C,120,0,0x49FA60,1, 0x4B4D9A,120,0,0x4B4B40,1, 0x4B4DBC,120,0,0x4B4B40,2, 0x4B9C9D,120,0,0x4B9C70,1, 0x4B9F41,120,0,0x4B9DE0,1, 0x4BA83B,120,0,0x4BA7E0,1, 0x4BA843,120,0,0x4BA7E0,2, 0x4BA8D6,120,0,0x4BA880,1, 0x4BA8DE,120,0,0x4BA880,2, 0x4BAEDB,120,0,0x4BAE80,1, 0x4CD003,120,0,0x4CCEE0,1, 0x4CD07F,120,0,0x4CCEE0,2, 0x4CDE4C,120,0,0x4CCEE0,3, 0x4CE249,120,0,0x4CCEE0,4, 0x4CE391,120,0,0x4CCEE0,5, 0x4CE63D,120,0,0x4CCEE0,6, 0x4D241C,120,0,0x4D1F00,1, 0x4D4D18,120,0,0x4D49A0,1, 0x4D4DAC,120,0,0x4D49A0,2, 0x4D4DFD,120,0,0x4D49A0,3, 0x4D4E06,120,0,0x4D49A0,4, 0x4E017F,120,0,0x4DF980,1, 0x4E2927,120,0,0x4E24C0,1, 0x4E2AC5,120,0,0x4E2960,1, 0x4E2D74,120,0,0x4E2960,2, 0x4E2E7C,120,0,0x4E2DB0,1, 0x4E32A6,120,0,0x4E2E90,1, 0x4E3899,120,0,0x4E3720,1, 0x4E4425,120,0,0x4E3F00,1, 0x4E475B,120,0,0x4E46A0,1, 0x4E4DB7,120,0,0x4E4CB0,1, 0x4E550A,120,0,0x4E52E0,1, 0x4E57DA,120,0,0x4E55B0,1, 0x4ED836,120,0,0x4ED660,1, 0x4ED94D,120,0,0x4ED850,1, 0x4F5133,120,0,0x4F4A40,1, 0x504943,120,0,0x504940,1, 0x50FC63,120,0,0x50FC20,1, 0x50FCF8,120,0,0x50FC20,2, 0x518E35,120,0,0x518DB0,1, 0x51B45D,120,0,0x51B370,1, 0x51C4D3,120,0,0x51C4D0,1, 0x52D266,120,0,0x52C880,1, 0x52D26F,120,0,0x52C880,2, 0x52E904,120,0,0x52E850,1, 0x52EACD,120,0,0x52E920,1, 0x532CCB,120,0,0x531640,1, 0x5354DB,120,0,0x535420,1, 0x5361CB,120,0,0x535D10,1, 0x53A177,120,0,0x53A090,1, 0x53B444,120,0,0x53A090,2, 0x53C2BF,120,0,0x53C160,1, 0x53C4ED,120,0,0x53C430,1, 0x53E1A0,120,0,0x53D720,1, 0x53EE50,120,0,0x53EA80,1, 0x542FB3,120,0,0x542E30,1, 0x542FBC,120,0,0x542E30,2, 0x542FC5,120,0,0x542E30,3, 0x54608D,120,0,0x545D80,1, 0x546C46,120,0,0x546C40,1, 0x547E5E,120,0,0x547D20,1, 0x55056B,120,0,0x550450,1, 0x550573,120,0,0x550450,2, 0x555E07,120,0,0x5555C0,1, 0x556062,120,0,0x5555C0,2, 0x55655B,120,0,0x5555C0,3, 0x5566D3,120,0,0x5555C0,4, 0x55680B,120,0,0x5555C0,5, 0x55B62C,120,0,0x55B110,1, 0x55B6CF,120,0,0x55B110,2, 0x55B7B1,120,0,0x55B110,3, 0x57AF60,120,0,0x57AEB0,1, 0x5942C0,120,0,0x5941F0,1, 0x5942C9,120,0,0x5941F0,2, 0x594346,120,0,0x5941F0,3, 0x594352,120,0,0x5941F0,4, 0x59441D,120,0,0x5941F0,5, 0x594F4F,120,0,0x594EB0,1, 0x594F58,120,0,0x594EB0,2, 0x594FD5,120,0,0x594EB0,3, 0x594FE1,120,0,0x594EB0,4, 0x5953AB,120,0,0x594EB0,5, 0x5958B2,120,0,0x5953E0,1, 0x5958BB,120,0,0x5953E0,2, 0x595944,120,0,0x5953E0,3, 0x59594D,120,0,0x5953E0,4, 0x596EBE,120,0,0x596880,1, 0x596EC7,120,0,0x596880,2, 0x40F73E,120,2,0,1, 0x40F932,120,2,0,1, 0x410C61,120,2,0,1, 0x410C99,120,2,0,1, 0x518DCF,120,2,0,1, 0x53CDC8,120,2,0,1>;
using def_t = void(CMatrix *);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *>, 0>;
META_END

META_BEGIN(CMatrix::Attach)
static int address;
static int global_address;
static const int id = 0x4B8DD0;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4B8DD0, 0x4B8EC0, 0x4B8E50>;
// total references count: 10en (33), 11en (33), steam (33)
using refs_t = RefList<0x46FEDF,100,0,0x46FEC0,1, 0x473F3B,100,0,0x473F10,1, 0x4B8DA4,100,0,0x4B8D90,1, 0x51B0F0,100,0,0x51B070,1, 0x51B1FD,100,0,0x51B1B0,1, 0x52D00C,100,0,0x52C6B0,1, 0x535DF8,100,0,0x535B40,1, 0x535E81,100,0,0x535B40,2, 0x535F03,100,0,0x535B40,3, 0x535F85,100,0,0x535B40,4, 0x539F0C,100,0,0x539EA0,1, 0x53A244,100,0,0x539EA0,2, 0x53A3D9,100,0,0x539EA0,3, 0x53A574,100,0,0x539EA0,4, 0x53A714,100,0,0x539EA0,5, 0x53A8B0,100,0,0x539EA0,6, 0x53AA44,100,0,0x539EA0,7, 0x53AB77,100,0,0x539EA0,8, 0x53AC5D,100,0,0x539EA0,9, 0x53AD8D,100,0,0x539EA0,10, 0x53AED3,100,0,0x539EA0,11, 0x53B059,100,0,0x539EA0,12, 0x53BFD5,100,0,0x53BF70,1, 0x53BFFD,100,0,0x53BF70,2, 0x53C024,100,0,0x53BF70,3, 0x53C04B,100,0,0x53BF70,4, 0x53C07F,100,0,0x53BF70,5, 0x53C0A6,100,0,0x53BF70,6, 0x53DF35,100,0,0x53D530,1, 0x53E8BC,100,0,0x53E890,1, 0x547BAE,100,0,0x547B70,1, 0x547C4E,100,0,0x547B70,2, 0x596C9B,100,0,0x5966E0,1, 0x46FEBF,110,0,0x46FEA0,1, 0x473F3B,110,0,0x473F10,1, 0x4B8E94,110,0,0x4B8E80,1, 0x51B320,110,0,0x51B2A0,1, 0x51B42D,110,0,0x51B3E0,1, 0x52D24C,110,0,0x52C8F0,1, 0x536038,110,0,0x535D80,1, 0x5360C1,110,0,0x535D80,2, 0x536143,110,0,0x535D80,3, 0x5361C5,110,0,0x535D80,4, 0x53A14C,110,0,0x53A0E0,1, 0x53A484,110,0,0x53A0E0,2, 0x53A619,110,0,0x53A0E0,3, 0x53A7B4,110,0,0x53A0E0,4, 0x53A954,110,0,0x53A0E0,5, 0x53AAF0,110,0,0x53A0E0,6, 0x53AC84,110,0,0x53A0E0,7, 0x53ADB7,110,0,0x53A0E0,8, 0x53AE9D,110,0,0x53A0E0,9, 0x53AFCD,110,0,0x53A0E0,10, 0x53B113,110,0,0x53A0E0,11, 0x53B299,110,0,0x53A0E0,12, 0x53C215,110,0,0x53C1B0,1, 0x53C23D,110,0,0x53C1B0,2, 0x53C264,110,0,0x53C1B0,3, 0x53C28B,110,0,0x53C1B0,4, 0x53C2BF,110,0,0x53C1B0,5, 0x53C2E6,110,0,0x53C1B0,6, 0x53E175,110,0,0x53D770,1, 0x53EAFC,110,0,0x53EAD0,1, 0x547DAE,110,0,0x547D70,1, 0x547E4E,110,0,0x547D70,2, 0x596F4B,110,0,0x596990,1, 0x46FEBF,120,0,0x46FEA0,1, 0x473F3B,120,0,0x473F10,1, 0x4B8E24,120,0,0x4B8E10,1, 0x51B2B0,120,0,0x51B230,1, 0x51B3BD,120,0,0x51B370,1, 0x52D1DC,120,0,0x52C880,1, 0x535FC8,120,0,0x535D10,1, 0x536051,120,0,0x535D10,2, 0x5360D3,120,0,0x535D10,3, 0x536155,120,0,0x535D10,4, 0x53A0FC,120,0,0x53A090,1, 0x53A434,120,0,0x53A090,2, 0x53A5C9,120,0,0x53A090,3, 0x53A764,120,0,0x53A090,4, 0x53A904,120,0,0x53A090,5, 0x53AAA0,120,0,0x53A090,6, 0x53AC34,120,0,0x53A090,7, 0x53AD67,120,0,0x53A090,8, 0x53AE4D,120,0,0x53A090,9, 0x53AF7D,120,0,0x53A090,10, 0x53B0C3,120,0,0x53A090,11, 0x53B249,120,0,0x53A090,12, 0x53C1C5,120,0,0x53C160,1, 0x53C1ED,120,0,0x53C160,2, 0x53C214,120,0,0x53C160,3, 0x53C23B,120,0,0x53C160,4, 0x53C26F,120,0,0x53C160,5, 0x53C296,120,0,0x53C160,6, 0x53E125,120,0,0x53D720,1, 0x53EAAC,120,0,0x53EA80,1, 0x547D5E,120,0,0x547D20,1, 0x547DFE,120,0,0x547D20,2, 0x596E3B,120,0,0x596880,1>;
using def_t = void(CMatrix *, RwMatrix *, bool);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *,RwMatrix *,bool>, 0,1,2>;
META_END

META_BEGIN(CMatrix::AttachRW)
static int address;
static int global_address;
static const int id = 0x4B8E00;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4B8E00, 0x4B8EF0, 0x4B8E80>;
// total references count: 10en (5), 11en (5), steam (5)
using refs_t = RefList<0x473F00,100,0,0x473EA0,1, 0x54DE0D,100,0,0x54C1D0,1, 0x596E54,100,0,0x5966E0,1, 0x596EF9,100,0,0x5966E0,2, 0x596F91,100,0,0x5966E0,3, 0x473F00,110,0,0x473EA0,1, 0x54DF8D,110,0,0x54C350,1, 0x597104,110,0,0x596990,1, 0x5971A9,110,0,0x596990,2, 0x597241,110,0,0x596990,3, 0x473F00,120,0,0x473EA0,1, 0x54DF3D,120,0,0x54C300,1, 0x596FF4,120,0,0x596880,1, 0x597099,120,0,0x596880,2, 0x597131,120,0,0x596880,3>;
using def_t = void(CMatrix *, RwMatrix *, bool);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *,RwMatrix *,bool>, 0,1,2>;
META_END

META_BEGIN(CMatrix::Detach)
static int address;
static int global_address;
static const int id = 0x4B8E30;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4B8E30, 0x4B8F20, 0x4B8EB0>;
// total references count: 10en (6), 11en (6), steam (6)
using refs_t = RefList<0x473F85,100,0,0x473F60,1, 0x473F97,100,0,0x473F90,1, 0x50B853,100,0,0x50B850,1, 0x54B2B3,100,0,0x54B2A0,1, 0x54DD7C,100,0,0x54C1D0,1, 0x596DF6,100,0,0x5966E0,1, 0x473F85,110,0,0x473F60,1, 0x473F97,110,0,0x473F90,1, 0x50B943,110,0,0x50B940,1, 0x54B433,110,0,0x54B420,1, 0x54DEFC,110,0,0x54C350,1, 0x5970A6,110,0,0x596990,1, 0x473F85,120,0,0x473F60,1, 0x473F97,120,0,0x473F90,1, 0x50B8D3,120,0,0x50B8D0,1, 0x54B3E3,120,0,0x54B3D0,1, 0x54DEAC,120,0,0x54C300,1, 0x596F96,120,0,0x596880,1>;
using def_t = void(CMatrix *);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *>, 0>;
META_END

META_BEGIN(CMatrix::Update)
static int address;
static int global_address;
static const int id = 0x4B8E50;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4B8E50, 0x4B8F40, 0x4B8ED0>;
// total references count: 10en (2), 11en (2), steam (2)
using refs_t = RefList<0x48D0D8,100,0,0x48D040,1, 0x4B8DF7,100,0,0x4B8DD0,1, 0x48D1D8,110,0,0x48D140,1, 0x4B8EE7,110,0,0x4B8EC0,1, 0x48D168,120,0,0x48D0D0,1, 0x4B8E77,120,0,0x4B8E50,1>;
using def_t = void(CMatrix *);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *>, 0>;
META_END

META_BEGIN(CMatrix::UpdateRW)
static int address;
static int global_address;
static const int id = 0x4B8EC0;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4B8EC0, 0x4B8FB0, 0x4B8F40>;
// total references count: 10en (89), 11en (89), steam (89)
using refs_t = RefList<0x413C47,100,0,0x413AC0,1, 0x413C7B,100,0,0x413AC0,2, 0x413CA6,100,0,0x413AC0,3, 0x42676B,100,0,0x426730,1, 0x4267A9,100,0,0x426730,2, 0x4268C8,100,0,0x4268A0,1, 0x42690A,100,0,0x4268E0,1, 0x426951,100,0,0x4268E0,2, 0x42844F,100,0,0x4283D0,1, 0x4284B3,100,0,0x4283D0,2, 0x42F9B9,100,0,0x42F7A0,1, 0x42FC64,100,0,0x42F7A0,2, 0x430940,100,0,0x430860,1, 0x430A5B,100,0,0x430860,2, 0x430B57,100,0,0x430860,3, 0x430BE6,100,0,0x430860,4, 0x432CC7,100,0,0x432AE0,1, 0x432E5F,100,0,0x432D50,1, 0x433057,100,0,0x432F60,1, 0x433C7D,100,0,0x433BA0,1, 0x434B8A,100,0,0x434B20,1, 0x434BF4,100,0,0x434B20,2, 0x434FB3,100,0,0x434B20,3, 0x4374ED,100,0,0x436FA0,1, 0x43DE38,100,0,0x43D530,1, 0x440416,100,0,0x43ED30,1, 0x444ED0,100,0,0x444B20,1, 0x44A039,100,0,0x448240,1, 0x45B342,100,0,0x45AB30,1, 0x45DBFF,100,0,0x45DA20,1, 0x460D67,100,0,0x45FF70,1, 0x474578,100,0,0x474350,1, 0x4745A5,100,0,0x474350,2, 0x4745EF,100,0,0x474350,3, 0x474686,100,0,0x474350,4, 0x47580D,100,0,0x475670,1, 0x475A00,100,0,0x475830,1, 0x4778F9,100,0,0x4777C0,1, 0x49F947,100,0,0x49F890,1, 0x4B1AEC,100,0,0x4B1A60,1, 0x4B1C3A,100,0,0x4B1A60,2, 0x4B1C79,100,0,0x4B1A60,3, 0x4B1CC3,100,0,0x4B1A60,4, 0x4B1D11,100,0,0x4B1A60,5, 0x4B1D6D,100,0,0x4B1A60,6, 0x4B1E22,100,0,0x4B1A60,7, 0x4B1EEA,100,0,0x4B1A60,8, 0x4B4576,100,0,0x4B4300,1, 0x4B8E27,100,0,0x4B8E00,1, 0x4B8F5B,100,0,0x4B8F40,1, 0x4BBDD5,100,0,0x4BBDA0,1, 0x4CA56C,100,0,0x4C8910,1, 0x4ED7CF,100,0,0x4ED620,1, 0x4ED8C1,100,0,0x4ED810,1, 0x4F45D0,100,0,0x4F45A0,1, 0x4FF299,100,0,0x4FF290,1, 0x51B1E2,100,0,0x51B1B0,1, 0x51B24E,100,0,0x51B1B0,2, 0x51B9F4,100,0,0x51B480,1, 0x52D08D,100,0,0x52C6B0,1, 0x52E72B,100,0,0x52E680,1, 0x52E8F4,100,0,0x52E750,1, 0x535303,100,0,0x535250,1, 0x539F7B,100,0,0x539EA0,1, 0x53A397,100,0,0x539EA0,2, 0x53A52A,100,0,0x539EA0,3, 0x53A6CA,100,0,0x539EA0,4, 0x53A860,100,0,0x539EA0,5, 0x53A9FA,100,0,0x539EA0,6, 0x53AAB4,100,0,0x539EA0,7, 0x53AC1D,100,0,0x539EA0,8, 0x53AD4B,100,0,0x539EA0,9, 0x53AE81,100,0,0x539EA0,10, 0x53B017,100,0,0x539EA0,11, 0x53B1B7,100,0,0x539EA0,12, 0x53C2F5,100,0,0x53C240,1, 0x53DFA4,100,0,0x53D530,1, 0x53E910,100,0,0x53E890,1, 0x544657,100,0,0x543AC0,1, 0x54515F,100,0,0x545000,1, 0x547C02,100,0,0x547B70,1, 0x547C9E,100,0,0x547B70,2, 0x54983B,100,0,0x547CC0,1, 0x54DD3D,100,0,0x54C1D0,1, 0x54FEE0,100,0,0x54F800,1, 0x550469,100,0,0x550360,1, 0x550472,100,0,0x550360,2, 0x58A0B0,100,0,0x589D00,1, 0x596D15,100,0,0x5966E0,1, 0x413C47,110,0,0x413AC0,1, 0x413C7B,110,0,0x413AC0,2, 0x413CA6,110,0,0x413AC0,3, 0x42676B,110,0,0x426730,1, 0x4267A9,110,0,0x426730,2, 0x4268C8,110,0,0x4268A0,1, 0x42690A,110,0,0x4268E0,1, 0x426951,110,0,0x4268E0,2, 0x42844F,110,0,0x4283D0,1, 0x4284B3,110,0,0x4283D0,2, 0x42F9B9,110,0,0x42F7A0,1, 0x42FC64,110,0,0x42F7A0,2, 0x430940,110,0,0x430860,1, 0x430A5B,110,0,0x430860,2, 0x430B57,110,0,0x430860,3, 0x430BE6,110,0,0x430860,4, 0x432CC7,110,0,0x432AE0,1, 0x432E5F,110,0,0x432D50,1, 0x433057,110,0,0x432F60,1, 0x433C7D,110,0,0x433BA0,1, 0x434B8A,110,0,0x434B20,1, 0x434BF4,110,0,0x434B20,2, 0x434FB3,110,0,0x434B20,3, 0x4374ED,110,0,0x436FA0,1, 0x43DE38,110,0,0x43D530,1, 0x440416,110,0,0x43ED30,1, 0x444ED0,110,0,0x444B20,1, 0x44A039,110,0,0x448240,1, 0x45B342,110,0,0x45AB30,1, 0x45DBFF,110,0,0x45DA20,1, 0x460D67,110,0,0x45FF70,1, 0x474578,110,0,0x474350,1, 0x4745A5,110,0,0x474350,2, 0x4745EF,110,0,0x474350,3, 0x474686,110,0,0x474350,4, 0x47580D,110,0,0x475670,1, 0x475A00,110,0,0x475830,1, 0x4778F9,110,0,0x4777C0,1, 0x49FA37,110,0,0x49F980,1, 0x4B1BDC,110,0,0x4B1B50,1, 0x4B1D2A,110,0,0x4B1B50,2, 0x4B1D69,110,0,0x4B1B50,3, 0x4B1DB3,110,0,0x4B1B50,4, 0x4B1E01,110,0,0x4B1B50,5, 0x4B1E5D,110,0,0x4B1B50,6, 0x4B1F12,110,0,0x4B1B50,7, 0x4B1FDA,110,0,0x4B1B50,8, 0x4B4666,110,0,0x4B43F0,1, 0x4B8F17,110,0,0x4B8EF0,1, 0x4B904B,110,0,0x4B9030,1, 0x4BBEC5,110,0,0x4BBE90,1, 0x4CA60C,110,0,0x4C89B0,1, 0x4ED87F,110,0,0x4ED6D0,1, 0x4ED971,110,0,0x4ED8C0,1, 0x4F4680,110,0,0x4F4650,1, 0x4FF379,110,0,0x4FF370,1, 0x51B412,110,0,0x51B3E0,1, 0x51B47E,110,0,0x51B3E0,2, 0x51BC24,110,0,0x51B6B0,1, 0x52D2CD,110,0,0x52C8F0,1, 0x52E96B,110,0,0x52E8C0,1, 0x52EB34,110,0,0x52E990,1, 0x535543,110,0,0x535490,1, 0x53A1BB,110,0,0x53A0E0,1, 0x53A5D7,110,0,0x53A0E0,2, 0x53A76A,110,0,0x53A0E0,3, 0x53A90A,110,0,0x53A0E0,4, 0x53AAA0,110,0,0x53A0E0,5, 0x53AC3A,110,0,0x53A0E0,6, 0x53ACF4,110,0,0x53A0E0,7, 0x53AE5D,110,0,0x53A0E0,8, 0x53AF8B,110,0,0x53A0E0,9, 0x53B0C1,110,0,0x53A0E0,10, 0x53B257,110,0,0x53A0E0,11, 0x53B3F7,110,0,0x53A0E0,12, 0x53C535,110,0,0x53C480,1, 0x53E1E4,110,0,0x53D770,1, 0x53EB50,110,0,0x53EAD0,1, 0x544897,110,0,0x543D00,1, 0x54539F,110,0,0x545240,1, 0x547E02,110,0,0x547D70,1, 0x547E9E,110,0,0x547D70,2, 0x549A3B,110,0,0x547EC0,1, 0x54DEBD,110,0,0x54C350,1, 0x550020,110,0,0x54F940,1, 0x5505A9,110,0,0x5504A0,1, 0x5505B2,110,0,0x5504A0,2, 0x58A3F0,110,0,0x58A040,1, 0x596FC5,110,0,0x596990,1, 0x413C47,120,0,0x413AC0,1, 0x413C7B,120,0,0x413AC0,2, 0x413CA6,120,0,0x413AC0,3, 0x42676B,120,0,0x426730,1, 0x4267A9,120,0,0x426730,2, 0x4268C8,120,0,0x4268A0,1, 0x42690A,120,0,0x4268E0,1, 0x426951,120,0,0x4268E0,2, 0x42844F,120,0,0x4283D0,1, 0x4284B3,120,0,0x4283D0,2, 0x42F9B9,120,0,0x42F7A0,1, 0x42FC64,120,0,0x42F7A0,2, 0x430940,120,0,0x430860,1, 0x430A5B,120,0,0x430860,2, 0x430B57,120,0,0x430860,3, 0x430BE6,120,0,0x430860,4, 0x432CC7,120,0,0x432AE0,1, 0x432E5F,120,0,0x432D50,1, 0x433057,120,0,0x432F60,1, 0x433C7D,120,0,0x433BA0,1, 0x434B8A,120,0,0x434B20,1, 0x434BF4,120,0,0x434B20,2, 0x434FB3,120,0,0x434B20,3, 0x4374ED,120,0,0x436FA0,1, 0x43DE38,120,0,0x43D530,1, 0x440416,120,0,0x43ED30,1, 0x444ED0,120,0,0x444B20,1, 0x44A039,120,0,0x448240,1, 0x45B342,120,0,0x45AB30,1, 0x45DBFF,120,0,0x45DA20,1, 0x460D67,120,0,0x45FF70,1, 0x474578,120,0,0x474350,1, 0x4745A5,120,0,0x474350,2, 0x4745EF,120,0,0x474350,3, 0x474686,120,0,0x474350,4, 0x47580D,120,0,0x475670,1, 0x475A00,120,0,0x475830,1, 0x4778F9,120,0,0x4777C0,1, 0x49F9C7,120,0,0x49F910,1, 0x4B1B6C,120,0,0x4B1AE0,1, 0x4B1CBA,120,0,0x4B1AE0,2, 0x4B1CF9,120,0,0x4B1AE0,3, 0x4B1D43,120,0,0x4B1AE0,4, 0x4B1D91,120,0,0x4B1AE0,5, 0x4B1DED,120,0,0x4B1AE0,6, 0x4B1EA2,120,0,0x4B1AE0,7, 0x4B1F6A,120,0,0x4B1AE0,8, 0x4B45F6,120,0,0x4B4380,1, 0x4B8EA7,120,0,0x4B8E80,1, 0x4B8FDB,120,0,0x4B8FC0,1, 0x4BBE55,120,0,0x4BBE20,1, 0x4CA59C,120,0,0x4C8940,1, 0x4ED80F,120,0,0x4ED660,1, 0x4ED901,120,0,0x4ED850,1, 0x4F4610,120,0,0x4F45E0,1, 0x4FF309,120,0,0x4FF300,1, 0x51B3A2,120,0,0x51B370,1, 0x51B40E,120,0,0x51B370,2, 0x51BBB4,120,0,0x51B640,1, 0x52D25D,120,0,0x52C880,1, 0x52E8FB,120,0,0x52E850,1, 0x52EAC4,120,0,0x52E920,1, 0x5354D3,120,0,0x535420,1, 0x53A16B,120,0,0x53A090,1, 0x53A587,120,0,0x53A090,2, 0x53A71A,120,0,0x53A090,3, 0x53A8BA,120,0,0x53A090,4, 0x53AA50,120,0,0x53A090,5, 0x53ABEA,120,0,0x53A090,6, 0x53ACA4,120,0,0x53A090,7, 0x53AE0D,120,0,0x53A090,8, 0x53AF3B,120,0,0x53A090,9, 0x53B071,120,0,0x53A090,10, 0x53B207,120,0,0x53A090,11, 0x53B3A7,120,0,0x53A090,12, 0x53C4E5,120,0,0x53C430,1, 0x53E194,120,0,0x53D720,1, 0x53EB00,120,0,0x53EA80,1, 0x544847,120,0,0x543CB0,1, 0x54534F,120,0,0x5451F0,1, 0x547DB2,120,0,0x547D20,1, 0x547E4E,120,0,0x547D20,2, 0x5499EB,120,0,0x547E70,1, 0x54DE6D,120,0,0x54C300,1, 0x54FFD0,120,0,0x54F8F0,1, 0x550559,120,0,0x550450,1, 0x550562,120,0,0x550450,2, 0x58A2E0,120,0,0x589F30,1, 0x596EB5,120,0,0x596880,1>;
using def_t = void(CMatrix *);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *>, 0>;
META_END

META_BEGIN_OVERLOADED(CMatrix::operator=, void (CMatrix::*)(CMatrix const &))
static int address;
static int global_address;
static const int id = 0x4B8F40;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4B8F40, 0x4B9030, 0x4B8FC0>;
// total references count: 10en (45), 11en (45), steam (45)
using refs_t = RefList<0x410CDB,100,0,0x410BE0,1, 0x410D03,100,0,0x410BE0,2, 0x410D7A,100,0,0x410BE0,3, 0x410DA8,100,0,0x410BE0,4, 0x4295CA,100,0,0x429560,1, 0x4373D1,100,0,0x436FA0,1, 0x437402,100,0,0x436FA0,2, 0x4374D6,100,0,0x436FA0,3, 0x44A2AE,100,0,0x448240,1, 0x46EEC1,100,0,0x46EEA0,1, 0x4778E8,100,0,0x4777C0,1, 0x4787EF,100,0,0x4786B0,1, 0x47892D,100,0,0x4786B0,2, 0x496B49,100,0,0x4961A0,1, 0x496BAF,100,0,0x4961A0,2, 0x496D44,100,0,0x4961A0,3, 0x497017,100,0,0x496F10,1, 0x49B9C5,100,0,0x49B620,1, 0x49BB6F,100,0,0x49B620,2, 0x49DD9C,100,0,0x49DA10,1, 0x49DF3B,100,0,0x49DA10,2, 0x49F914,100,0,0x49F890,1, 0x4A1D37,100,0,0x4A1B40,1, 0x4A283E,100,0,0x4A2550,1, 0x4A285D,100,0,0x4A2550,2, 0x4B8D83,100,0,0x4B8D70,1, 0x4BA7B2,100,0,0x4BA760,1, 0x4BA84D,100,0,0x4BA800,1, 0x4BADB1,100,0,0x4BAD50,1, 0x4BADC4,100,0,0x4BAD50,2, 0x4D4CDC,100,0,0x4D4970,1, 0x4D4D70,100,0,0x4D4970,2, 0x4D4DC4,100,0,0x4D4970,3, 0x4E0136,100,0,0x4DF940,1, 0x4F45C8,100,0,0x4F45A0,1, 0x518C6C,100,0,0x518BF0,1, 0x532ABB,100,0,0x531470,1, 0x53CD0C,100,0,0x53CBA0,1, 0x5462D3,100,0,0x546270,1, 0x55B4AE,100,0,0x55B030,1, 0x55B626,100,0,0x55B030,2, 0x57ACA6,100,0,0x57AC60,1, 0x594114,100,0,0x594050,1, 0x594DA3,100,0,0x594D10,1, 0x595706,100,0,0x595240,1, 0x410CDB,110,0,0x410BE0,1, 0x410D03,110,0,0x410BE0,2, 0x410D7A,110,0,0x410BE0,3, 0x410DA8,110,0,0x410BE0,4, 0x4295CA,110,0,0x429560,1, 0x4373D1,110,0,0x436FA0,1, 0x437402,110,0,0x436FA0,2, 0x4374D6,110,0,0x436FA0,3, 0x44A2AE,110,0,0x448240,1, 0x46EEA1,110,0,0x46EE80,1, 0x4778E8,110,0,0x4777C0,1, 0x4787EF,110,0,0x4786B0,1, 0x47892D,110,0,0x4786B0,2, 0x496C09,110,0,0x496260,1, 0x496C6F,110,0,0x496260,2, 0x496E04,110,0,0x496260,3, 0x4970D7,110,0,0x496FD0,1, 0x49BAB5,110,0,0x49B710,1, 0x49BC5F,110,0,0x49B710,2, 0x49DE8C,110,0,0x49DB00,1, 0x49E02B,110,0,0x49DB00,2, 0x49FA04,110,0,0x49F980,1, 0x4A1E27,110,0,0x4A1C30,1, 0x4A292E,110,0,0x4A2640,1, 0x4A294D,110,0,0x4A2640,2, 0x4B8E73,110,0,0x4B8E60,1, 0x4BA8A2,110,0,0x4BA850,1, 0x4BA93D,110,0,0x4BA8F0,1, 0x4BAEA1,110,0,0x4BAE40,1, 0x4BAEB4,110,0,0x4BAE40,2, 0x4D4D7C,110,0,0x4D4A10,1, 0x4D4E10,110,0,0x4D4A10,2, 0x4D4E64,110,0,0x4D4A10,3, 0x4E01E6,110,0,0x4DF9F0,1, 0x4F4678,110,0,0x4F4650,1, 0x518E9C,110,0,0x518E20,1, 0x532CFB,110,0,0x5316B0,1, 0x53CF4C,110,0,0x53CDE0,1, 0x5464D3,110,0,0x546470,1, 0x55B5DE,110,0,0x55B160,1, 0x55B756,110,0,0x55B160,2, 0x57AFF6,110,0,0x57AFB0,1, 0x5943C4,110,0,0x594300,1, 0x595053,110,0,0x594FC0,1, 0x5959B6,110,0,0x5954F0,1, 0x410CDB,120,0,0x410BE0,1, 0x410D03,120,0,0x410BE0,2, 0x410D7A,120,0,0x410BE0,3, 0x410DA8,120,0,0x410BE0,4, 0x4295CA,120,0,0x429560,1, 0x4373D1,120,0,0x436FA0,1, 0x437402,120,0,0x436FA0,2, 0x4374D6,120,0,0x436FA0,3, 0x44A2AE,120,0,0x448240,1, 0x46EEA1,120,0,0x46EE80,1, 0x4778E8,120,0,0x4777C0,1, 0x4787EF,120,0,0x4786B0,1, 0x47892D,120,0,0x4786B0,2, 0x496B99,120,0,0x4961F0,1, 0x496BFF,120,0,0x4961F0,2, 0x496D94,120,0,0x4961F0,3, 0x497067,120,0,0x496F60,1, 0x49BA45,120,0,0x49B6A0,1, 0x49BBEF,120,0,0x49B6A0,2, 0x49DE1C,120,0,0x49DA90,1, 0x49DFBB,120,0,0x49DA90,2, 0x49F994,120,0,0x49F910,1, 0x4A1DB7,120,0,0x4A1BC0,1, 0x4A28BE,120,0,0x4A25D0,1, 0x4A28DD,120,0,0x4A25D0,2, 0x4B8E03,120,0,0x4B8DF0,1, 0x4BA832,120,0,0x4BA7E0,1, 0x4BA8CD,120,0,0x4BA880,1, 0x4BAE31,120,0,0x4BADD0,1, 0x4BAE44,120,0,0x4BADD0,2, 0x4D4D0C,120,0,0x4D49A0,1, 0x4D4DA0,120,0,0x4D49A0,2, 0x4D4DF4,120,0,0x4D49A0,3, 0x4E0176,120,0,0x4DF980,1, 0x4F4608,120,0,0x4F45E0,1, 0x518E2C,120,0,0x518DB0,1, 0x532C8B,120,0,0x531640,1, 0x53CEFC,120,0,0x53CD90,1, 0x546483,120,0,0x546420,1, 0x55B58E,120,0,0x55B110,1, 0x55B706,120,0,0x55B110,2, 0x57AEF6,120,0,0x57AEB0,1, 0x5942B4,120,0,0x5941F0,1, 0x594F43,120,0,0x594EB0,1, 0x5958A6,120,0,0x5953E0,1>;
using def_t = void(CMatrix *, CMatrix const &);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *,CMatrix const &>, 0,1>;
META_END

META_BEGIN(CMatrix::CopyOnlyMatrix)
static int address;
static int global_address;
static const int id = 0x4B8F70;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4B8F70, 0x4B9060, 0x4B8FF0>;
// total references count: 10en (1), 11en (1), steam (1)
using refs_t = RefList<0x5932DA,100,0,0x5932B0,1, 0x59358A,110,0,0x593560,1, 0x59347A,120,0,0x593450,1>;
using def_t = void(CMatrix *, CMatrix const &);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *,CMatrix const &>, 0,1>;
META_END

META_BEGIN_OVERLOADED(CMatrix::operator+=, void (CMatrix::*)(CMatrix const &))
static int address;
static int global_address;
static const int id = 0x4B8F90;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4B8F90, 0x4B9080, 0x4B9010>;
// total references count: 10en (3), 11en (3), steam (3)
using refs_t = RefList<0x59419A,100,0,0x594050,1, 0x594E29,100,0,0x594D10,1, 0x595798,100,0,0x595240,1, 0x59444A,110,0,0x594300,1, 0x5950D9,110,0,0x594FC0,1, 0x595A48,110,0,0x5954F0,1, 0x59433A,120,0,0x5941F0,1, 0x594FC9,120,0,0x594EB0,1, 0x595938,120,0,0x5953E0,1>;
using def_t = void(CMatrix *, CMatrix const &);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *,CMatrix const &>, 0,1>;
META_END

META_BEGIN(CMatrix::SetUnity)
static int address;
static int global_address;
static const int id = 0x4B9010;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4B9010, 0x4B9100, 0x4B9090>;
// total references count: 10en (4), 11en (4), steam (4)
using refs_t = RefList<0x4CD2A5,100,0,0x4CCEB0,1, 0x4D4C45,100,0,0x4D4970,1, 0x51B084,100,0,0x51B070,1, 0x5955F3,100,0,0x595240,1, 0x4CD345,110,0,0x4CCF50,1, 0x4D4CE5,110,0,0x4D4A10,1, 0x51B2B4,110,0,0x51B2A0,1, 0x5958A3,110,0,0x5954F0,1, 0x4CD2D5,120,0,0x4CCEE0,1, 0x4D4C75,120,0,0x4D49A0,1, 0x51B244,120,0,0x51B230,1, 0x595793,120,0,0x5953E0,1>;
using def_t = void(CMatrix *);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *>, 0>;
META_END

META_BEGIN(CMatrix::ResetOrientation)
static int address;
static int global_address;
static const int id = 0x4B9070;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4B9070, 0x4B9160, 0x4B90F0>;
// total references count: 10en (1), 11en (1), steam (1)
using refs_t = RefList<0x543449,100,0,0x543440,1, 0x543689,110,0,0x543680,1, 0x543639,120,0,0x543630,1>;
using def_t = void(CMatrix *);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *>, 0>;
META_END

META_BEGIN(CMatrix::SetScale)
static int address;
static int global_address;
static const int id = 0x4B90B0;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4B90B0, 0x4B91A0, 0x4B9130>;
// total references count: 10en (8), 11en (8), steam (8)
using refs_t = RefList<0x46BD9A,100,0,0x46BAD0,1, 0x49F9CF,100,0,0x49F9A0,1, 0x5940EB,100,0,0x594050,1, 0x59416D,100,0,0x594050,2, 0x594D7A,100,0,0x594D10,1, 0x594DFC,100,0,0x594D10,2, 0x5956DC,100,0,0x595240,1, 0x59576E,100,0,0x595240,2, 0x46BD8A,110,0,0x46BAA0,1, 0x49FABF,110,0,0x49FA90,1, 0x59439B,110,0,0x594300,1, 0x59441D,110,0,0x594300,2, 0x59502A,110,0,0x594FC0,1, 0x5950AC,110,0,0x594FC0,2, 0x59598C,110,0,0x5954F0,1, 0x595A1E,110,0,0x5954F0,2, 0x46BD8A,120,0,0x46BAA0,1, 0x49FA4F,120,0,0x49FA20,1, 0x59428B,120,0,0x5941F0,1, 0x59430D,120,0,0x5941F0,2, 0x594F1A,120,0,0x594EB0,1, 0x594F9C,120,0,0x594EB0,2, 0x59587C,120,0,0x5953E0,1, 0x59590E,120,0,0x5953E0,2>;
using def_t = void(CMatrix *, float);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *,float>, 0,1>;
META_END

META_BEGIN_OVERLOADED(CMatrix::SetTranslate, void (CMatrix::*)(float, float, float))
static int address;
static int global_address;
static const int id = 0x4B9100;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4B9100, 0x4B91F0, 0x4B9180>;
// total references count: 10en (17), 11en (17), steam (17)
using refs_t = RefList<0x4B4BD7,100,0,0x4B4AC0,1, 0x4D4CA2,100,0,0x4D4970,1, 0x4D4D36,100,0,0x4D4970,2, 0x51B9C7,100,0,0x51B480,1, 0x53C2ED,100,0,0x53C240,1, 0x54A8CC,100,0,0x54A8C0,1, 0x54BBF6,100,0,0x54B820,1, 0x54BC86,100,0,0x54B820,2, 0x54E069,100,0,0x54E000,1, 0x54E1C9,100,0,0x54E160,1, 0x54F113,100,0,0x54F000,1, 0x54F1F4,100,0,0x54F000,2, 0x550443,100,0,0x550360,1, 0x550461,100,0,0x550360,2, 0x55B106,100,0,0x55B030,1, 0x55B245,100,0,0x55B030,2, 0x55B455,100,0,0x55B030,3, 0x4B4CC7,110,0,0x4B4BB0,1, 0x4D4D42,110,0,0x4D4A10,1, 0x4D4DD6,110,0,0x4D4A10,2, 0x51BBF7,110,0,0x51B6B0,1, 0x53C52D,110,0,0x53C480,1, 0x54AA8C,110,0,0x54AA80,1, 0x54BD76,110,0,0x54B9A0,1, 0x54BE06,110,0,0x54B9A0,2, 0x54E1B9,110,0,0x54E150,1, 0x54E309,110,0,0x54E2A0,1, 0x54F253,110,0,0x54F140,1, 0x54F334,110,0,0x54F140,2, 0x550583,110,0,0x5504A0,1, 0x5505A1,110,0,0x5504A0,2, 0x55B236,110,0,0x55B160,1, 0x55B375,110,0,0x55B160,2, 0x55B585,110,0,0x55B160,3, 0x4B4C57,120,0,0x4B4B40,1, 0x4D4CD2,120,0,0x4D49A0,1, 0x4D4D66,120,0,0x4D49A0,2, 0x51BB87,120,0,0x51B640,1, 0x53C4DD,120,0,0x53C430,1, 0x54AA3C,120,0,0x54AA30,1, 0x54BD26,120,0,0x54B950,1, 0x54BDB6,120,0,0x54B950,2, 0x54E169,120,0,0x54E100,1, 0x54E2B9,120,0,0x54E250,1, 0x54F203,120,0,0x54F0F0,1, 0x54F2E4,120,0,0x54F0F0,2, 0x550533,120,0,0x550450,1, 0x550551,120,0,0x550450,2, 0x55B1E6,120,0,0x55B110,1, 0x55B325,120,0,0x55B110,2, 0x55B535,120,0,0x55B110,3>;
using def_t = void(CMatrix *, float, float, float);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *,float,float,float>, 0,1,2,3>;
META_END

META_BEGIN(CMatrix::SetRotateXOnly)
static int address;
static int global_address;
static const int id = 0x4B9160;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4B9160, 0x4B9250, 0x4B91E0>;
// total references count: 10en (2), 11en (2), steam (2)
using refs_t = RefList<0x4268BD,100,0,0x4268A0,1, 0x4B9317,100,0,0x4B9310,1, 0x4268BD,110,0,0x4268A0,1, 0x4B9407,110,0,0x4B9400,1, 0x4268BD,120,0,0x4268A0,1, 0x4B9397,120,0,0x4B9390,1>;
using def_t = void(CMatrix *, float);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *,float>, 0,1>;
META_END

META_BEGIN(CMatrix::SetRotateYOnly)
static int address;
static int global_address;
static const int id = 0x4B91F0;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4B91F0, 0x4B92E0, 0x4B9270>;
// total references count: 10en (1), 11en (1), steam (1)
using refs_t = RefList<0x4B9347,100,0,0x4B9340,1, 0x4B9437,110,0,0x4B9430,1, 0x4B93C7,120,0,0x4B93C0,1>;
using def_t = void(CMatrix *, float);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *,float>, 0,1>;
META_END

META_BEGIN(CMatrix::SetRotateZOnly)
static int address;
static int global_address;
static const int id = 0x4B9280;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4B9280, 0x4B9370, 0x4B9300>;
// total references count: 10en (6), 11en (6), steam (6)
using refs_t = RefList<0x433049,100,0,0x432F60,1, 0x434D10,100,0,0x434B20,1, 0x4355FB,100,0,0x435570,1, 0x435C93,100,0,0x435C30,1, 0x4B9377,100,0,0x4B9370,1, 0x54A7EE,100,0,0x54A640,1, 0x433049,110,0,0x432F60,1, 0x434D10,110,0,0x434B20,1, 0x4355FB,110,0,0x435570,1, 0x435C93,110,0,0x435C30,1, 0x4B9467,110,0,0x4B9460,1, 0x54A9BE,110,0,0x54A810,1, 0x433049,120,0,0x432F60,1, 0x434D10,120,0,0x434B20,1, 0x4355FB,120,0,0x435570,1, 0x435C93,120,0,0x435C30,1, 0x4B93F7,120,0,0x4B93F0,1, 0x54A96E,120,0,0x54A7C0,1>;
using def_t = void(CMatrix *, float);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *,float>, 0,1>;
META_END

META_BEGIN(CMatrix::SetRotateX)
static int address;
static int global_address;
static const int id = 0x4B9310;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4B9310, 0x4B9400, 0x4B9390>;
// total references count: 10en (4), 11en (4), steam (4)
using refs_t = RefList<0x52E6C4,100,0,0x52E680,1, 0x53A2DF,100,0,0x539EA0,1, 0x53A60F,100,0,0x539EA0,2, 0x547C71,100,0,0x547B70,1, 0x52E904,110,0,0x52E8C0,1, 0x53A51F,110,0,0x53A0E0,1, 0x53A84F,110,0,0x53A0E0,2, 0x547E71,110,0,0x547D70,1, 0x52E894,120,0,0x52E850,1, 0x53A4CF,120,0,0x53A090,1, 0x53A7FF,120,0,0x53A090,2, 0x547E21,120,0,0x547D20,1>;
using def_t = void(CMatrix *, float);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *,float>, 0,1>;
META_END

META_BEGIN(CMatrix::SetRotateY)
static int address;
static int global_address;
static const int id = 0x4B9340;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4B9340, 0x4B9430, 0x4B93C0>;
// total references count: 10en (4), 11en (4), steam (4)
using refs_t = RefList<0x4BA777,100,0,0x4BA760,1, 0x4BA812,100,0,0x4BA800,1, 0x52E6E1,100,0,0x52E680,1, 0x53AA6F,100,0,0x539EA0,1, 0x4BA867,110,0,0x4BA850,1, 0x4BA902,110,0,0x4BA8F0,1, 0x52E921,110,0,0x52E8C0,1, 0x53ACAF,110,0,0x53A0E0,1, 0x4BA7F7,120,0,0x4BA7E0,1, 0x4BA892,120,0,0x4BA880,1, 0x52E8B1,120,0,0x52E850,1, 0x53AC5F,120,0,0x53A090,1>;
using def_t = void(CMatrix *, float);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *,float>, 0,1>;
META_END

META_BEGIN(CMatrix::SetRotateZ)
static int address;
static int global_address;
static const int id = 0x4B9370;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4B9370, 0x4B9460, 0x4B93F0>;
// total references count: 10en (11), 11en (11), steam (11)
using refs_t = RefList<0x437348,100,0,0x436FA0,1, 0x449A2A,100,0,0x448240,1, 0x49FA1B,100,0,0x49FA00,1, 0x4C7A49,100,0,0x4C7A00,1, 0x4ED796,100,0,0x4ED620,1, 0x4ED888,100,0,0x4ED810,1, 0x52E6FE,100,0,0x52E680,1, 0x539F39,100,0,0x539EA0,1, 0x53DF62,100,0,0x53D530,1, 0x53E8E3,100,0,0x53E890,1, 0x547BD6,100,0,0x547B70,1, 0x437348,110,0,0x436FA0,1, 0x449A2A,110,0,0x448240,1, 0x49FB0B,110,0,0x49FAF0,1, 0x4C7AE9,110,0,0x4C7AA0,1, 0x4ED846,110,0,0x4ED6D0,1, 0x4ED938,110,0,0x4ED8C0,1, 0x52E93E,110,0,0x52E8C0,1, 0x53A179,110,0,0x53A0E0,1, 0x53E1A2,110,0,0x53D770,1, 0x53EB23,110,0,0x53EAD0,1, 0x547DD6,110,0,0x547D70,1, 0x437348,120,0,0x436FA0,1, 0x449A2A,120,0,0x448240,1, 0x49FA9B,120,0,0x49FA80,1, 0x4C7A79,120,0,0x4C7A30,1, 0x4ED7D6,120,0,0x4ED660,1, 0x4ED8C8,120,0,0x4ED850,1, 0x52E8CE,120,0,0x52E850,1, 0x53A129,120,0,0x53A090,1, 0x53E152,120,0,0x53D720,1, 0x53EAD3,120,0,0x53EA80,1, 0x547D86,120,0,0x547D20,1>;
using def_t = void(CMatrix *, float);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *,float>, 0,1>;
META_END

META_BEGIN(CMatrix::SetRotate)
static int address;
static int global_address;
static const int id = 0x4B93A0;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4B93A0, 0x4B9490, 0x4B9420>;
// total references count: 10en (51), 11en (51), steam (51)
using refs_t = RefList<0x432CA1,100,0,0x432AE0,1, 0x432E39,100,0,0x432D50,1, 0x433C57,100,0,0x433BA0,1, 0x4379AA,100,0,0x4376A0,1, 0x43BC1B,100,0,0x43AEA0,1, 0x43DE09,100,0,0x43D530,1, 0x43E708,100,0,0x43D530,2, 0x441ACB,100,0,0x440CB0,1, 0x444EA1,100,0,0x444B20,1, 0x44C1EF,100,0,0x448240,1, 0x490FE6,100,0,0x490EE0,1, 0x4C2DD1,100,0,0x4C2C90,1, 0x4C7EF1,100,0,0x4C7EA0,1, 0x4CA6E4,100,0,0x4C8910,1, 0x4CA899,100,0,0x4C8910,2, 0x4CACEA,100,0,0x4C8910,3, 0x4DB037,100,0,0x4D94E0,1, 0x4E018A,100,0,0x4DF940,1, 0x4E0754,100,0,0x4E0640,1, 0x4E360C,100,0,0x4E33D0,1, 0x4E3826,100,0,0x4E36E0,1, 0x4EFBB4,100,0,0x4EFB60,1, 0x4F5300,100,0,0x4F5280,1, 0x4F53EC,100,0,0x4F5280,2, 0x4F5478,100,0,0x4F5280,3, 0x4F5504,100,0,0x4F5280,4, 0x4F5590,100,0,0x4F5280,5, 0x4F569A,100,0,0x4F5280,6, 0x52E8C7,100,0,0x52E750,1, 0x5351D5,100,0,0x535180,1, 0x5352D7,100,0,0x535250,1, 0x53A2C6,100,0,0x539EA0,1, 0x53A471,100,0,0x539EA0,2, 0x53A5F2,100,0,0x539EA0,3, 0x53A7A8,100,0,0x539EA0,4, 0x53A93C,100,0,0x539EA0,5, 0x53ABB2,100,0,0x539EA0,6, 0x53AC97,100,0,0x539EA0,7, 0x53ADCD,100,0,0x539EA0,8, 0x53AF5C,100,0,0x539EA0,9, 0x53B0FB,100,0,0x539EA0,10, 0x5419C5,100,0,0x541970,1, 0x542804,100,0,0x5426E0,1, 0x542A54,100,0,0x5426E0,2, 0x545136,100,0,0x545000,1, 0x585CA7,100,0,0x585BB0,1, 0x586170,100,0,0x585BB0,2, 0x58625C,100,0,0x585BB0,3, 0x587351,100,0,0x587200,1, 0x587495,100,0,0x587200,2, 0x58A081,100,0,0x589D00,1, 0x432CA1,110,0,0x432AE0,1, 0x432E39,110,0,0x432D50,1, 0x433C57,110,0,0x433BA0,1, 0x4379AA,110,0,0x4376A0,1, 0x43BC1B,110,0,0x43AEA0,1, 0x43DE09,110,0,0x43D530,1, 0x43E708,110,0,0x43D530,2, 0x441ACB,110,0,0x440CB0,1, 0x444EA1,110,0,0x444B20,1, 0x44C1EF,110,0,0x448240,1, 0x4910A6,110,0,0x490FA0,1, 0x4C2E71,110,0,0x4C2D30,1, 0x4C7F91,110,0,0x4C7F40,1, 0x4CA784,110,0,0x4C89B0,1, 0x4CA939,110,0,0x4C89B0,2, 0x4CAD8A,110,0,0x4C89B0,3, 0x4DB0D7,110,0,0x4D9580,1, 0x4E023A,110,0,0x4DF9F0,1, 0x4E0804,110,0,0x4E06F0,1, 0x4E36BC,110,0,0x4E3480,1, 0x4E38D6,110,0,0x4E3790,1, 0x4EFC64,110,0,0x4EFC10,1, 0x4F53B0,110,0,0x4F5330,1, 0x4F549C,110,0,0x4F5330,2, 0x4F5528,110,0,0x4F5330,3, 0x4F55B4,110,0,0x4F5330,4, 0x4F5640,110,0,0x4F5330,5, 0x4F574A,110,0,0x4F5330,6, 0x52EB07,110,0,0x52E990,1, 0x535415,110,0,0x5353C0,1, 0x535517,110,0,0x535490,1, 0x53A506,110,0,0x53A0E0,1, 0x53A6B1,110,0,0x53A0E0,2, 0x53A832,110,0,0x53A0E0,3, 0x53A9E8,110,0,0x53A0E0,4, 0x53AB7C,110,0,0x53A0E0,5, 0x53ADF2,110,0,0x53A0E0,6, 0x53AED7,110,0,0x53A0E0,7, 0x53B00D,110,0,0x53A0E0,8, 0x53B19C,110,0,0x53A0E0,9, 0x53B33B,110,0,0x53A0E0,10, 0x541C05,110,0,0x541BB0,1, 0x542A44,110,0,0x542920,1, 0x542C94,110,0,0x542920,2, 0x545376,110,0,0x545240,1, 0x585FE7,110,0,0x585EF0,1, 0x5864B0,110,0,0x585EF0,2, 0x58659C,110,0,0x585EF0,3, 0x587691,110,0,0x587540,1, 0x5877D5,110,0,0x587540,2, 0x58A3C1,110,0,0x58A040,1, 0x432CA1,120,0,0x432AE0,1, 0x432E39,120,0,0x432D50,1, 0x433C57,120,0,0x433BA0,1, 0x4379AA,120,0,0x4376A0,1, 0x43BC1B,120,0,0x43AEA0,1, 0x43DE09,120,0,0x43D530,1, 0x43E708,120,0,0x43D530,2, 0x441ACB,120,0,0x440CB0,1, 0x444EA1,120,0,0x444B20,1, 0x44C1EF,120,0,0x448240,1, 0x491036,120,0,0x490F30,1, 0x4C2E01,120,0,0x4C2CC0,1, 0x4C7F21,120,0,0x4C7ED0,1, 0x4CA714,120,0,0x4C8940,1, 0x4CA8C9,120,0,0x4C8940,2, 0x4CAD1A,120,0,0x4C8940,3, 0x4DB067,120,0,0x4D9510,1, 0x4E01CA,120,0,0x4DF980,1, 0x4E0794,120,0,0x4E0680,1, 0x4E364C,120,0,0x4E3410,1, 0x4E3866,120,0,0x4E3720,1, 0x4EFBF4,120,0,0x4EFBA0,1, 0x4F5340,120,0,0x4F52C0,1, 0x4F542C,120,0,0x4F52C0,2, 0x4F54B8,120,0,0x4F52C0,3, 0x4F5544,120,0,0x4F52C0,4, 0x4F55D0,120,0,0x4F52C0,5, 0x4F56DA,120,0,0x4F52C0,6, 0x52EA97,120,0,0x52E920,1, 0x5353A5,120,0,0x535350,1, 0x5354A7,120,0,0x535420,1, 0x53A4B6,120,0,0x53A090,1, 0x53A661,120,0,0x53A090,2, 0x53A7E2,120,0,0x53A090,3, 0x53A998,120,0,0x53A090,4, 0x53AB2C,120,0,0x53A090,5, 0x53ADA2,120,0,0x53A090,6, 0x53AE87,120,0,0x53A090,7, 0x53AFBD,120,0,0x53A090,8, 0x53B14C,120,0,0x53A090,9, 0x53B2EB,120,0,0x53A090,10, 0x541BB5,120,0,0x541B60,1, 0x5429F4,120,0,0x5428D0,1, 0x542C44,120,0,0x5428D0,2, 0x545326,120,0,0x5451F0,1, 0x585ED7,120,0,0x585DE0,1, 0x5863A0,120,0,0x585DE0,2, 0x58648C,120,0,0x585DE0,3, 0x587581,120,0,0x587430,1, 0x5876C5,120,0,0x587430,2, 0x58A2B1,120,0,0x589F30,1>;
using def_t = void(CMatrix *, float, float, float);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *,float,float,float>, 0,1,2,3>;
META_END

META_BEGIN(CMatrix::RotateX)
static int address;
static int global_address;
static const int id = 0x4B9510;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4B9510, 0x4B9600, 0x4B9590>;
// total references count: 10en (3), 11en (3), steam (3)
using refs_t = RefList<0x4ED7A2,100,0,0x4ED620,1, 0x4ED894,100,0,0x4ED810,1, 0x51B9DC,100,0,0x51B480,1, 0x4ED852,110,0,0x4ED6D0,1, 0x4ED944,110,0,0x4ED8C0,1, 0x51BC0C,110,0,0x51B6B0,1, 0x4ED7E2,120,0,0x4ED660,1, 0x4ED8D4,120,0,0x4ED850,1, 0x51BB9C,120,0,0x51B640,1>;
using def_t = void(CMatrix *, float);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *,float>, 0,1>;
META_END

META_BEGIN(CMatrix::RotateZ)
static int address;
static int global_address;
static const int id = 0x4B9640;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4B9640, 0x4B9730, 0x4B96C0>;
// total references count: 10en (8), 11en (8), steam (8)
using refs_t = RefList<0x4CD2B5,100,0,0x4CCEB0,1, 0x4D4CB1,100,0,0x4D4970,1, 0x4D4D45,100,0,0x4D4970,2, 0x51B8DB,100,0,0x51B480,1, 0x54182E,100,0,0x53EF10,1, 0x54481E,100,0,0x544700,1, 0x55B113,100,0,0x55B030,1, 0x55B252,100,0,0x55B030,2, 0x4CD355,110,0,0x4CCF50,1, 0x4D4D51,110,0,0x4D4A10,1, 0x4D4DE5,110,0,0x4D4A10,2, 0x51BB0B,110,0,0x51B6B0,1, 0x541A6E,110,0,0x53F150,1, 0x544A5E,110,0,0x544940,1, 0x55B243,110,0,0x55B160,1, 0x55B382,110,0,0x55B160,2, 0x4CD2E5,120,0,0x4CCEE0,1, 0x4D4CE1,120,0,0x4D49A0,1, 0x4D4D75,120,0,0x4D49A0,2, 0x51BA9B,120,0,0x51B640,1, 0x541A1E,120,0,0x53F100,1, 0x544A0E,120,0,0x5448F0,1, 0x55B1F3,120,0,0x55B110,1, 0x55B332,120,0,0x55B110,2>;
using def_t = void(CMatrix *, float);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *,float>, 0,1>;
META_END

META_BEGIN(CMatrix::Rotate)
static int address;
static int global_address;
static const int id = 0x4B9770;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4B9770, 0x4B9860, 0x4B97F0>;
// total references count: 10en (2), 11en (2), steam (2)
using refs_t = RefList<0x53ABD8,100,0,0x539EA0,1, 0x55B46C,100,0,0x55B030,1, 0x53AE18,110,0,0x53A0E0,1, 0x55B59C,110,0,0x55B160,1, 0x53ADC8,120,0,0x53A090,1, 0x55B54C,120,0,0x55B110,1>;
using def_t = void(CMatrix *, float, float, float);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *,float,float,float>, 0,1,2,3>;
META_END

META_BEGIN(CMatrix::Reorthogonalise)
static int address;
static int global_address;
static const int id = 0x4B9A80;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4B9A80, 0x4B9B70, 0x4B9B00>;
// total references count: 10en (3), 11en (3), steam (3)
using refs_t = RefList<0x496C4A,100,0,0x4961A0,1, 0x496F6E,100,0,0x496F10,1, 0x4B9F8A,100,0,0x4B9ED0,1, 0x496D0A,110,0,0x496260,1, 0x49702E,110,0,0x496FD0,1, 0x4BA07A,110,0,0x4B9FC0,1, 0x496C9A,120,0,0x4961F0,1, 0x496FBE,120,0,0x496F60,1, 0x4BA00A,120,0,0x4B9F50,1>;
using def_t = void(CMatrix *);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *>, 0>;
META_END

META_BEGIN(CMatrix::Translate)
static int address;
static int global_address;
static const int id = 0x4CBA70;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x4CBA70, 0x4CBB10, 0x4CBAA0>;
// total references count: 10en (4), 11en (4), steam (4)
using refs_t = RefList<0x4CA701,100,0,0x4C8910,1, 0x4CA8B6,100,0,0x4C8910,2, 0x4CAD07,100,0,0x4C8910,3, 0x4DB054,100,0,0x4D94E0,1, 0x4CA7A1,110,0,0x4C89B0,1, 0x4CA956,110,0,0x4C89B0,2, 0x4CADA7,110,0,0x4C89B0,3, 0x4DB0F4,110,0,0x4D9580,1, 0x4CA731,120,0,0x4C8940,1, 0x4CA8E6,120,0,0x4C8940,2, 0x4CAD37,120,0,0x4C8940,3, 0x4DB084,120,0,0x4D9510,1>;
using def_t = void(CMatrix *, float, float, float);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *,float,float,float>, 0,1,2,3>;
META_END

META_BEGIN_OVERLOADED(CMatrix::SetTranslate, void (CMatrix::*)(CVector *))
static int address;
static int global_address;
static const int id = 0x54A8C0;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x54A8C0, 0x54AA80, 0x54AA30>;
// total references count: 10en (1), 11en (1), steam (1)
using refs_t = RefList<0x54A7D7,100,0,0x54A640,1, 0x54A9A7,110,0,0x54A810,1, 0x54A957,120,0,0x54A7C0,1>;
using def_t = void(CMatrix *, CVector *);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CMatrix *,CVector *>, 0,1>;
META_END

}
